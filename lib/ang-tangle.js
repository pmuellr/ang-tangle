// Generated by CoffeeScript 1.6.3
var Kinds, Program, Verbose, Version, align, coffee, error, fs, getDate, getFile, log, logv, main, marked, path, pkg, processData, processScripts, processViews, sh, sourceMap, writeScript, _;

fs = require("fs");

path = require("path");

_ = require("underscore");

sh = require("shelljs");

marked = require("marked");

coffee = require("coffee-script");

sourceMap = require("source-map");

pkg = require("../package.json");

Program = pkg.name;

Version = pkg.version;

Verbose = false;

exports.run = function(_arg, options) {
  var iDir, oFile;
  iDir = _arg[0], oFile = _arg[1];
  if (options == null) {
    options = {};
  }
  if (iDir == null) {
    error("no input directory specified");
  }
  if (oFile == null) {
    error("no output file specified");
  }
  if (!sh.test("-d", iDir)) {
    error("input directory is not a directory: " + iDir);
  }
  Verbose = !!options.verbose;
  main(iDir, oFile, options);
};

main = function(iDir, oFile, options) {
  var angTangleScript, content, file, fileName, fileNames, files, initScript, name, oFileMap, out, script, scriptPrefix, scriptSuffix, scripts, _i, _len;
  oFileMap = "" + oFile + ".map.json";
  logv("iDir:     " + iDir);
  logv("oFile:    " + oFile);
  logv("oFileMap: " + oFileMap);
  logv("options:  " + (JSON.stringify(options, null, 4)));
  logv("");
  fileNames = sh.ls("-R", iDir);
  files = {};
  for (_i = 0, _len = fileNames.length; _i < _len; _i++) {
    fileName = fileNames[_i];
    if (!sh.test("-f", path.join(iDir, fileName))) {
      continue;
    }
    file = getFile(iDir, fileName);
    if (file == null) {
      log("skipping file: " + (path.join(iDir, fileName)));
      continue;
    }
    files[file.name] = file;
  }
  processData(files);
  processViews(files);
  scripts = processScripts(files);
  out = [];
  out.sourceNode = new sourceMap.SourceNode;
  scriptPrefix = ";(function(){\n";
  scriptSuffix = "\n})();\n";
  out.push(scriptPrefix);
  out.sourceNode.add(scriptPrefix);
  initScript = scripts["init"];
  angTangleScript = scripts["--ang-tangle--"];
  if (initScript == null) {
    error("init script required");
  }
  delete scripts["init"];
  delete scripts["--ang-tangle--"];
  writeScript(out, initScript, angTangleScript);
  for (name in scripts) {
    script = scripts[name];
    writeScript(out, script);
  }
  out.push(scriptSuffix);
  out.sourceNode.add(scriptSuffix);
  out.push("//# sourceMappingURL=" + (path.basename(oFileMap)) + "\n");
  log("generating: " + oFile);
  sh.mkdir("-p", path.dirname(oFile));
  fs.writeFileSync(oFile, out.join(""));
  log("generating: " + oFileMap);
  content = out.sourceNode.toStringWithSourceMap({
    file: path.basename(oFile)
  });
  content = "" + content.map;
  content = JSON.stringify(JSON.parse(content), null, 4);
  fs.writeFileSync(oFileMap, content);
};

writeScript = function(out, script, angTangleScript) {
  var baseName, dirName, errorMessage, fileName, isInit, smConsumer, sourceNode, wrapped, wrappedAfter, wrappedBefore;
  isInit = false;
  if (angTangleScript) {
    isInit = true;
    wrappedBefore = "\n//----- " + angTangleScript.name + "\n";
    wrappedAfter = "\n";
    out.push(wrappedBefore);
    out.push(angTangleScript.js);
    out.push(wrappedAfter);
    out.sourceNode.add(wrappedBefore);
    out.sourceNode.add(angTangleScript.js);
    out.sourceNode.add(wrappedAfter);
  }
  fileName = JSON.stringify(script.name);
  dirName = JSON.stringify(path.dirname(script.name));
  baseName = JSON.stringify(script.base);
  if (script.sourceMap) {
    smConsumer = new sourceMap.SourceMapConsumer(script.sourceMap);
    sourceNode = sourceMap.SourceNode.fromStringWithSourceMap(script.js, smConsumer);
  } else {
    sourceNode = new sourceMap.SourceNode(1, 1, script.fileName, script.js);
  }
  sourceNode.setSourceContent(script.name, script.source);
  if (isInit) {
    errorMessage = "the init script must call AngTangle.module(name, requires[, configFn]) to create the module";
    wrappedBefore = "//----- " + script.name + "\n;(function(AngTangle) {\n";
    wrappedAfter = "\n})(new AngTangle.Init());\nif (!AngTangle.Module) throw Error(" + (JSON.stringify(errorMessage)) + ")\n\n";
  } else {
    wrappedBefore = "//----- " + script.name + "\n;(function(AngTangle) {\n";
    wrappedAfter = "\n})(new AngTangle.Script(AngTangle.Module, " + (JSON.stringify(script.base)) + "));\n\n";
  }
  wrapped = "" + wrappedBefore + script.js + wrappedAfter;
  out.push(wrapped);
  sourceNode.prepend(wrappedBefore);
  sourceNode.add(wrappedAfter);
  return out.sourceNode.add(sourceNode);
};

processScripts = function(files) {
  var err, file, fileName, name, result, scripts;
  file = {
    name: "--ang-tangle--.coffee",
    full: "--ang-tangle--.coffee",
    base: "--ang-tangle--",
    type: "coffee",
    kind: "script"
  };
  fileName = path.join(__dirname, "..", "www-src", "ang-tangle.coffee");
  file.contents = fs.readFileSync(fileName, "utf8");
  files[file.name] = file;
  scripts = {};
  for (name in files) {
    file = files[name];
    if (file.kind !== "script") {
      continue;
    }
    if (scripts[file.base] != null) {
      error("duplicate named script files: " + file.full + " and " + scripts[file.base].full);
    }
    if (file.type === "js") {
      result = {
        js: file.contents
      };
    } else if (file.type === "coffee") {
      try {
        result = coffee.compile(file.contents, {
          filename: file.name,
          sourceFiles: [file.name],
          generatedFile: "index.js",
          bare: true,
          sourceMap: true
        });
      } catch (_error) {
        err = _error;
        error("error compiling CoffeeScript file " + file.full + ": " + err);
      }
      result = {
        js: result.js,
        sourceMap: JSON.parse(result.v3SourceMap)
      };
    } else if (file.type === "litcoffee") {
      try {
        result = coffee.compile(file.contents, {
          filename: file.name,
          sourceFiles: [file.name],
          generatedFile: "index.js",
          bare: true,
          sourceMap: true,
          literate: true
        });
      } catch (_error) {
        err = _error;
        error("error compiling Literate CoffeeScript file " + file.full + ": " + err);
      }
      result = {
        js: result.js,
        sourceMap: JSON.parse(result.v3SourceMap)
      };
    }
    scripts[file.base] = files[name];
    scripts[file.base].js = result.js;
    scripts[file.base].source = file.contents;
    scripts[file.base].sourceMap = result.sourceMap;
  }
  return scripts;
};

processViews = function(files) {
  var dirBaseName, file, html, name, views;
  marked.setOptions({
    gfm: true,
    tables: true,
    breaks: false,
    pedantic: false,
    sanitize: true,
    smartLists: true,
    smartypants: false
  });
  views = {};
  for (name in files) {
    file = files[name];
    if (file.kind !== "view") {
      continue;
    }
    if (file.type === "html") {
      html = file.contents;
    } else if (file.type === "md") {
      html = marked(file.contents);
    }
    dirBaseName = path.join(file.dir, file.base);
    views[dirBaseName] = html;
  }
  file = {
    name: "--views--.coffee",
    full: "--views--.coffee",
    base: "--views--",
    type: "coffee",
    kind: "script"
  };
  file.contents = "AngTangle.constant 'views', " + (JSON.stringify(views, null, 4));
  return files[file.name] = file;
};

processData = function(files) {
  var data, dirBaseName, err, file, name, object;
  data = {};
  for (name in files) {
    file = files[name];
    if (file.kind !== "data") {
      continue;
    }
    if (file.type === "json") {
      try {
        object = JSON.parse(file.contents);
      } catch (_error) {
        err = _error;
        error("invalid JSON in file " + file.full + ": " + err);
      }
    }
    dirBaseName = path.join(file.dir, file.base);
    data[dirBaseName] = object;
  }
  file = {
    name: "--data--.coffee",
    full: "--data--.coffee",
    base: "--data--",
    type: "coffee",
    kind: "script"
  };
  file.contents = "AngTangle.constant 'data', " + (JSON.stringify(data, null, 4));
  return files[file.name] = file;
};

Kinds = {
  js: "script",
  coffee: "script",
  litcoffee: "script",
  html: "view",
  md: "view",
  json: "data",
  cson: "data"
};

getFile = function(dir, name) {
  var base, contents, err, full, kind, type;
  switch (false) {
    case !name.match(/.*\.js$/):
      type = "js";
      break;
    case !name.match(/.*\.coffee$/):
      type = "coffee";
      break;
    case !name.match(/.*\.litcoffee$/):
      type = "litcoffee";
      break;
    case !name.match(/.*\.html$/):
      type = "html";
      break;
    case !name.match(/.*\.md$/):
      type = "md";
      break;
    case !name.match(/.*\.json$/):
      type = "json";
      break;
    default:
      return;
  }
  kind = Kinds[type];
  full = path.join(dir, name);
  dir = path.dirname(name);
  base = path.basename(name).replace(/\.[^\.]*$/, "");
  try {
    contents = fs.readFileSync(full, "utf8");
  } catch (_error) {
    err = _error;
    error("error reading file " + full + ": " + err);
  }
  return {
    name: name,
    full: full,
    base: base,
    dir: dir,
    type: type,
    kind: kind,
    contents: contents
  };
};

log = function(message) {
  if ((message == null) || message === "") {
    message = "";
  } else {
    message = "" + pkg.name + ": " + message;
  }
  console.log(message);
};

logv = function(message) {
  if (!Verbose) {
    return;
  }
  log(message);
};

error = function(message) {
  log(message);
  process.exit(1);
};

getDate = function() {
  var date, day, hr, min, mon, ms, result, sec, yr;
  date = new Date();
  yr = date.getFullYear();
  mon = date.getMonth() + 1;
  day = date.getDate();
  hr = date.getHours();
  min = date.getMinutes();
  sec = date.getSeconds();
  ms = date.getMilliseconds();
  mon = align.right("" + mon, 2, 0);
  day = align.right("" + day, 2, 0);
  hr = align.right("" + hr, 2, 0);
  min = align.right("" + min, 2, 0);
  sec = align.right("" + sec, 2, 0);
  result = "" + yr + "-" + mon + "-" + day + " " + hr + ":" + min + ":" + sec;
  return result;
};

align = function(s, dir, len, pad) {
  var add;
  if (pad == null) {
    pad = " ";
  }
  switch (dir[0]) {
    case "l":
      add = function(s) {
        return "" + s + pad;
      };
      break;
    case "r":
      add = function(s) {
        return "" + pad + s;
      };
      break;
    default:
      throw Error("invalid dir argument to align: " + dir);
  }
  s = "" + s;
  pad = "" + pad;
  while (s.length < len) {
    s = add(s);
  }
  return s;
};

align.left = function(s, len, pad) {
  if (pad == null) {
    pad = " ";
  }
  return align(s, "left", len, pad);
};

align.right = function(s, len, pad) {
  if (pad == null) {
    pad = " ";
  }
  return align(s, "right", len, pad);
};
