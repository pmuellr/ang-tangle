// Generated by CoffeeScript 1.6.3
var Program, Verbose, Version, align, coffee, dirMatch, error, fs, getDate, getFile, log, logv, main, marked, path, pkg, processData, processScripts, processViews, runBower, sh, sourceMap, writeScript, _;

fs = require("fs");

path = require("path");

_ = require("underscore");

sh = require("shelljs");

marked = require("marked");

coffee = require("coffee-script");

sourceMap = require("source-map");

pkg = require("../package.json");

Program = pkg.name;

Version = pkg.version;

Verbose = false;

exports.run = function(dir, options) {
  if (options == null) {
    options = {};
  }
  if (dir == null) {
    error("no dir specified");
  }
  if (options.output == null) {
    options.output = "" + dir + "-out";
  }
  Verbose = !!options.verbose;
  main(dir, options);
};

main = function(iDir, options) {
  var file, fileName, fileNames, files, iFile, initScript, name, oDir, oFile, out, script, scripts, stats, _i, _len;
  oDir = options.output;
  logv("iDir:    " + iDir);
  logv("oDir:    " + oDir);
  logv("options: " + (JSON.stringify(options, null, 4)));
  logv("");
  log("generating files in " + oDir);
  sh.mkdir("-p", oDir);
  if (!sh.test("-d", oDir)) {
    error("unable to create directory " + oDir);
  }
  fileNames = sh.ls("-R", iDir);
  options.copy.push("bower");
  options.ignore.push("bower_components");
  runBower(iDir, options.bower);
  files = {};
  for (_i = 0, _len = fileNames.length; _i < _len; _i++) {
    fileName = fileNames[_i];
    stats = fs.statSync(path.join(iDir, fileName));
    if (!stats.isFile()) {
      continue;
    }
    if (fileName === "index.html") {
      file = null;
    } else if (fileName === "bower-files.js" || fileName === "bower-files.coffee") {
      continue;
    } else if (dirMatch(options.copy, fileName)) {
      file = null;
    } else if (dirMatch(options.ignore, fileName)) {
      continue;
    } else {
      file = getFile(iDir, fileName);
    }
    if (file == null) {
      iFile = path.join(iDir, fileName);
      oFile = path.join(oDir, fileName);
      sh.mkdir("-p", path.dirname(oFile));
      sh.cp(iFile, oFile);
      continue;
    }
    files[file.name] = file;
  }
  processData(files);
  processViews(files);
  scripts = processScripts(files);
  out = [];
  initScript = scripts.init;
  if (initScript != null) {
    delete scripts.init;
    writeScript(out, initScript);
  }
  for (name in scripts) {
    script = scripts[name];
    writeScript(out, script);
  }
  oFile = path.join(oDir, "index.js");
  fs.writeFileSync(oFile, out.join("\n"));
};

runBower = function(iDir, force) {
  var bowerFiles, bowerFilesName, bowerProgram, dstDir, minBowerFilesName, origDir, pkgName, pkgSpec, srcFile, _ref;
  if (!force) {
    if (sh.test("-d", path.join(iDir, "bower"))) {
      return;
    }
  }
  bowerProgram = sh.which("bower");
  if (!bowerProgram) {
    error("bower is not installed");
  }
  bowerFilesName = path.resolve(path.join(iDir, "bower-files"));
  try {
    bowerFiles = require(bowerFilesName);
  } catch (_error) {
    log("creating minimal " + bowerFilesName + " module");
    minBowerFilesName = path.join(__dirname, "..", "bower-files-template.coffee");
    sh.cp(minBowerFilesName, path.join(iDir, "bower-files.coffee"));
    bowerFiles = require(bowerFilesName);
  }
  if (sh.test("-d", path.join(iDir, "bower"))) {
    sh.rm("-rf", path.join(iDir, "bower"));
  }
  if (sh.test("-d", path.join(iDir, "bower_components"))) {
    sh.rm("-rf", path.join(iDir, "bower_components"));
  }
  origDir = process.cwd();
  process.chdir(iDir);
  for (pkgName in bowerFiles) {
    pkgSpec = bowerFiles[pkgName];
    process.chdir;
    log("running bower install " + pkgName + "#" + pkgSpec.version);
    sh.exec("bower install " + pkgName + "#" + pkgSpec.version);
    _ref = pkgSpec.files;
    for (srcFile in _ref) {
      dstDir = _ref[srcFile];
      dstDir = path.join("bower", pkgName, dstDir);
      sh.mkdir("-p", dstDir);
      srcFile = path.join("bower_components", pkgName, srcFile);
      sh.cp(srcFile, dstDir);
    }
  }
  return process.chdir(origDir);
};

dirMatch = function(specs, fileName) {
  var prefix, spec, _i, _len;
  for (_i = 0, _len = specs.length; _i < _len; _i++) {
    spec = specs[_i];
    spec += "/";
    prefix = fileName.slice(0, spec.length);
    if (spec === prefix) {
      return true;
    }
  }
  return false;
};

writeScript = function(out, script) {
  var baseName, dirName, fileName, wrapped;
  fileName = JSON.stringify(script.name);
  dirName = JSON.stringify(path.dirname(script.name));
  baseName = JSON.stringify(script.base);
  wrapped = ";(function(__filename, __dirname, __basename) {\n" + script.js + "\n})(" + fileName + ", " + dirName + ", " + baseName + ");";
  out.push("//----- " + script.name);
  out.push(wrapped);
  return out.push("");
};

processScripts = function(files) {
  var err, file, name, result, scripts;
  scripts = {};
  for (name in files) {
    file = files[name];
    if (file.kind !== "script") {
      continue;
    }
    if (scripts[file.base] != null) {
      error("duplicate named script files: " + file.full + " and " + scripts[file.base].full);
    }
    if (file.type === "js") {
      result = {
        js: file.contents
      };
    } else if (file.type === "coffee") {
      try {
        result = coffee.compile(file.contents, {
          filename: file.name,
          sourceFiles: [file.name],
          generatedFile: "index.js",
          bare: true,
          sourceMap: true
        });
      } catch (_error) {
        err = _error;
        error("error compiling CoffeeScript file " + file.full + ": " + err);
      }
    } else if (file.type === "litcoffee") {
      try {
        result = coffee.compile(file.contents, {
          filename: file.name,
          sourceFiles: [file.name],
          generatedFile: "index.js",
          bare: true,
          sourceMap: true,
          literate: true
        });
      } catch (_error) {
        err = _error;
        error("error compiling Literate CoffeeScript file " + file.full + ": " + err);
      }
    }
    scripts[file.base] = files[name];
    scripts[file.base].js = result.js;
  }
  return scripts;
};

processViews = function(files) {
  var file, html, name, views;
  marked.setOptions({
    gfm: true,
    tables: true,
    breaks: false,
    pedantic: false,
    sanitize: true,
    smartLists: true,
    smartypants: false
  });
  views = {};
  for (name in files) {
    file = files[name];
    if (file.kind !== "view") {
      continue;
    }
    if (views[file.base] != null) {
      error("duplicate named view files: " + file.full + " and " + views[file.base].full);
    }
    if (file.type === "html") {
      html = file.contents;
    } else if (file.type === "md") {
      html = marked(file.contents);
    }
    views[file.base] = html;
  }
  file = {
    name: "--views--.coffee",
    full: "--views--.coffee",
    base: "--views--",
    type: "coffee",
    kind: "script"
  };
  file.contents = "app.constant \"views\", " + (JSON.stringify(views, null, 4));
  return files[file.name] = file;
};

processData = function(files) {
  var data, err, file, js, json, name, object;
  data = {};
  for (name in files) {
    file = files[name];
    if (file.kind !== "data") {
      continue;
    }
    if (data[file.base] != null) {
      error("duplicate named data files: " + file.full + " and " + data[file.base].full);
    }
    if (file.type === "cson") {
      js = coffee.compile(file.content, {
        bare: true
      });
      try {
        object = eval(js);
      } catch (_error) {
        err = _error;
        error("error evaluating cson file " + file.full + ": " + err);
      }
    } else if (file.type === "json") {
      try {
        object = JSON.parse(file.contents);
      } catch (_error) {
        err = _error;
        error("invalid JSON in file " + file.full + ": " + err);
      }
    }
    json = JSON.stringify(object, null, 4);
    data[file.base] = json;
  }
  file = {
    name: "--data--.coffee",
    full: "--data--.coffee",
    base: "--data--",
    type: "coffee",
    kind: "script"
  };
  file.contents = "app.constant \"data\", " + (JSON.stringify(data, null, 4));
  return files[file.name] = file;
};

getFile = function(dir, name) {
  var base, contents, err, full, kind, type;
  switch (false) {
    case !name.match(/.*\.js$/):
      type = "js";
      break;
    case !name.match(/.*\.coffee$/):
      type = "coffee";
      break;
    case !name.match(/.*\.litcoffee$/):
      type = "litcoffee";
      break;
    case !name.match(/.*\.html$/):
      type = "html";
      break;
    case !name.match(/.*\.md$/):
      type = "md";
      break;
    case !name.match(/.*\.json$/):
      type = "json";
      break;
    case !name.match(/.*\.cson$/):
      type = "cson";
      break;
    default:
      return;
  }
  switch (false) {
    case type !== "js":
      kind = "script";
      break;
    case type !== "coffee":
      kind = "script";
      break;
    case type !== "litcoffee":
      kind = "script";
      break;
    case type !== "html":
      kind = "view";
      break;
    case type !== "md":
      kind = "view";
      break;
    case type !== "json":
      kind = "data";
      break;
    case type !== "cson":
      kind = "data";
  }
  full = path.join(dir, name);
  base = path.basename(name).replace(/\.\w*$/, "");
  try {
    contents = fs.readFileSync(full, "utf8");
  } catch (_error) {
    err = _error;
    error("error reading file " + full + ": " + err);
  }
  return {
    name: name,
    full: full,
    base: base,
    type: type,
    kind: kind,
    contents: contents
  };
};

log = function(message) {
  if ((message == null) || message === "") {
    message = "";
  } else {
    message = "" + pkg.name + ": " + message;
  }
  console.log(message);
};

logv = function(message) {
  if (!Verbose) {
    return;
  }
  log(message);
};

error = function(message) {
  log(message);
  process.exit(1);
};

getDate = function() {
  var date, day, hr, min, mon, ms, result, sec, yr;
  date = new Date();
  yr = date.getFullYear();
  mon = date.getMonth() + 1;
  day = date.getDate();
  hr = date.getHours();
  min = date.getMinutes();
  sec = date.getSeconds();
  ms = date.getMilliseconds();
  mon = align.right("" + mon, 2, 0);
  day = align.right("" + day, 2, 0);
  hr = align.right("" + hr, 2, 0);
  min = align.right("" + min, 2, 0);
  sec = align.right("" + sec, 2, 0);
  result = "" + yr + "-" + mon + "-" + day + " " + hr + ":" + min + ":" + sec;
  return result;
};

align = function(s, dir, len, pad) {
  var add;
  if (pad == null) {
    pad = " ";
  }
  switch (dir[0]) {
    case "l":
      add = function(s) {
        return "" + s + pad;
      };
      break;
    case "r":
      add = function(s) {
        return "" + pad + s;
      };
      break;
    default:
      throw Error("invalid dir argument to align: " + dir);
  }
  s = "" + s;
  pad = "" + pad;
  while (s.length < len) {
    s = add(s);
  }
  return s;
};

align.left = function(s, len, pad) {
  if (pad == null) {
    pad = " ";
  }
  return align(s, "left", len, pad);
};

align.right = function(s, len, pad) {
  if (pad == null) {
    pad = " ";
  }
  return align(s, "right", len, pad);
};
